snippet pry
binding.pry
endsnippet

snippet save
save_and_open_page
endsnippet

snippet has
has_secure_password
endsnippet

snippet currentuser
helper_method :current_user

def current_user
  @current_user ||= User.find(session[:user_id]) if session[:user_id]
end
endsnippet

snippet authorize
helper_method :authorize

def authorize
  redirect_to root_path unless current_user
end
endsnippet

snippet usercreate
def create
  user = User.new(user_params)
  if user.save
     session[:user_id] = user.id
     redirect_to root_path, notice: "Welcome #{params[:user][:name]}"
  else
     redirect_to '/signup', notice: "Please fill out all required fields"
  end
end

private

def user_params
  params.require(:user).permit(:name, :email, :password, :password_confirmation)
end
endsnippet

snippet sessionscontroller
class SessionsController < ApplicationController
  def create
    user = User.find_by_email(params[:session][:email])
    if user && user.authenticate(params[:session][:password])
      session[:user_id] = user.id
      redirect_to '/', notice: "Welcome back "#{user.name}"
    else
      redirect_to '/login', notice: "Please fill out all required fields"
    end
  end

  def destroy
    session[:user_id] = nil
    redirect_to '/login'
  end
end
endsnippet

snippet itemcreate
def create
  ${1:item} = $1.new($1_params)
  if $1.save
    redirect_to $1_path($1), notice: "Success"
  else
    render "new", notice: "Sorry, somthing went wrong."
  end
end
endsnippet

snippet param
private

def ${1:name}_params
  params.require(:$1).permit(:${2:attribute})
end
endsnippet

snippet mailconfig
config.action_mailer.delivery_method = :smtp

config.action_mailer.smtp_settings = {
  address:              'smtp.mandrillapp.com',
  port:                 587,
  domain:               'example.com',
  user_name:            ENV=["MANDRILL_NAME"],
  password:             ENV=["MANDRILL_PASS"],
  authentication:       'plain',
  enable_starttls_auto: true
}

# ===============================
# rails generate mailer ${1:`echo "${PWD##*/}"`}Mailer

# https://github.com/kpearson/youve_changed/commit/c11eb8e2fa852a14e16fc16cd9621366684bf3be
# http://guides.rubyonrails.org/action_mailer_basics.html


# ========= Email Class =========

# app/mailers/application_mailer.rb
# class ApplicationMailer < ActionMailer::Base
#   default from: "from@example.com"
#   layout 'mailer'
# end

# app/mailers/$1_mailer.rb
# class $1Mailer < ApplicationMailer
#   def ${2:notify}(user, contact)
#     @user = user
#     attachments['scott.jpg'] = File.read("#{Rails.root}/public/scott.jpg")
#     mail(to: contact, subject: "#{user.name} <mail subject text>.")
#   end
# end

# Add to a controller controller action
# $1Mailer.$2(current_user, params[:email]).deliver_later


# ========== Email Body ===========
# generated...

# app/views/layouts/mailer.html.erb
# <html>
#   <body>
#     <%= yield %>
#   </body>
# </html>

# app/views/$1_mailer.html.erb
# <%= yield %>

# app/views/layouts/mailer.html.erb
# html version of the email body

# app/views/layouts/mailer.text.erb
# test version of the email body.


# ========== Mailer Testing ===========
# snippet = mailtester

# test/mailers/friend_mailer_test.rb
# require 'test_helper'

# class FriendMailerTest < ActionMailer::TestCase
#   def test_it_sends_an_email
#     user = User.create(name: 'Changy McChangerson', email: 'changy@example.com')
#     FriendMailer.$2(user, 'test@example.com').deliver_now
#     result = ActionMailer::Base.deliveries.last
#
#     assert result
#     assert result.to.include? "test@example.com"
#     assert_equal "Changy McChangerson says you've changed.", result.subject
#   end
# end
endsnippet

snippet mailcatcher
# app/config/environments/development.rb
config.action_mailer.delivery_method = :smtp

config.action_mailer.smtp_settings = {
  address: "localhost", :port => 1025
}

# 1) gem install mailcatcher
# 2) mailcatcher
# 3) Go to http://localhost:1080/
# 4) Send mail through smtp://localhost:1025
endsnippet

snippet mailtest
require 'test_helper'

class FriendMailerTest < ActionMailer::TestCase
  def test_it_sends_an_email
    user = User.create(name: 'Changy McChangerson', email: 'changy@example.com')
    <name>Mailer.${2:notify}user(user, 'test@example.com').deliver_now
    result = ActionMailer::Base.deliveries.last

    assert result
    assert result.to.include? "test@example.com"
    assert_equal "Changy McChangerson <email subject text>.", result.subject
  end
end
endsnippet
